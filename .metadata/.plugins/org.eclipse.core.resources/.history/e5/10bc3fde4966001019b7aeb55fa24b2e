package com.aurionpro.Game.model;

public class GameEngine {
	private Board board;

	public GameEngine(Board board) {
		this.board = board;
	}

	public boolean isWinningMove(int row, int col, char symbol) {
		// Horizontal check
		boolean horizontalWin = true;
		for (int i = 0; i < 3; i++) {
			if (board.grid[row][i] != symbol) {
				horizontalWin = false;
				break;
			}
		}

		// Vertical check
		boolean verticalWin = true;
		for (int i = 0; i < 3; i++) {
			if (board.grid[i][col] != symbol) {
				verticalWin = false;
				break;
			}
		}

		// diagonal
		boolean diagonalWin = true;
		if (row == col) {
			for (int i = 0; i < 3; i++) {
				if (board.grid[i][i] != symbol) {
					diagonalWin = false;
					break;
				}
			}
		} else {
			diagonalWin = false;
		}
		// Antidiagonal

		boolean antiDiagonalWin = true;
		if (row + col == 2) {
			for (int i = 0; i < 3; i++) {
				if (board.grid[i][2 - i] != symbol) {
					antiDiagonalWin = false;
					break;
				}
			}
		} else {
			antiDiagonalWin = false;
		}
		return horizontalWin || verticalWin || diagonalWin || antiDiagonalWin;
	}

	public void switchPlayer() {

	}

	public void playTurn(Player player, int row, int col) {

		if (row > 0 && row <= 3 && col > 0 && col <= 3) {

			if (board.isCellEmpty(row, col)) {

				board.placeSymbol(row, col, player.getSymbol());

				board.displayBoard();

				if (isWinningMove(row, col, player.getSymbol())) {
					System.out.println("Result: " + player.getName() + " wins! ðŸŽ‰");
//	                gameOver = true;
					return;
				}

				// Check for draw
				if (board.isFull()) {
					System.out.println("Result: It's a draw!");
//	                gameOver = true;
					return;
				}

//	            // Switch to the next player
//	            switchPlayer();
//	            System.out.println(currentPlayer.getName() + "'s (" + currentPlayer.getSymbol() + ") turn.");
//	            
			} else {
				System.out.println("Cell already occupied. Try another position.");
			}

		} else {
			System.out.println("Invalid input. Row and column must be between 1 and 3.");
		}
	}

}
