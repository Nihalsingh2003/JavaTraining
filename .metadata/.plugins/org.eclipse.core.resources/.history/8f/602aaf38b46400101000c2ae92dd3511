package com.aurionpro.GuitarApp.Test;

import java.util.InputMismatchException;
import java.util.List;
import java.util.Scanner;

import com.aurionpro.GuitarApp.model.Builder;
import com.aurionpro.GuitarApp.model.Guitar;
import com.aurionpro.GuitarApp.model.GuitarList;
import com.aurionpro.GuitarApp.model.Type;
import com.aurionpro.GuitarApp.model.Wood;

public class GuitarTest {
	public static <E extends Enum<E>> E getEnum(Scanner scanner, String prompt, E[] enumValues) {
		E choice = null;
		int userChoice;
		while (true) {
			System.out.println(prompt);

			for (E type : enumValues) {
				System.out.println(type.ordinal() + "." + type);

			}
			try {
				userChoice = scanner.nextInt();

				if (userChoice >= 1 && userChoice <= enumValues.length) {
					choice = enumValues[userChoice - 1];
					break;
				} else {
					System.out.println("Invalid option! Please select a valid option.");
				}

				break;
			} catch (InputMismatchException e) {

				System.out.println("Invalid input! Please enter a valid integer.");
				scanner.nextLine();
			}
		}
		return choice;
	}

	public static void main(String[] args) {
		Scanner scanner = new Scanner(System.in);
		GuitarList list = new GuitarList();
		while (true) {
			try {
				System.out.println("Choice one Operation:");
				System.out.println("1.AddGuitar");
				int userInput = scanner.nextInt();
				switch (userInput) {
				case 1:

					System.out.println("Enter the Guiter SerialNumber:");
					String serialNumber = scanner.nextLine();

					for (Guitar guitar : list.getGuitarData()) {
						if (guitar.getSerialNumber().equals(serialNumber)) {
							continue;
						}
					}
					// price
					scanner.nextLine();
					double price = 0;
					while (true) {
						try {
							System.out.println("Enter the Guitar Price:");
							price = scanner.nextDouble();
							if (price <= 0) {
								System.out.println("Please Enter price greater than 0!");
								continue;
							}
							break;
						} catch (InputMismatchException e) {
							System.out.println("Invalid price input! Please enter a valid number.");
							scanner.nextLine();
						}
					}

					// Model
					System.out.println("Enter the GuiterModel:");
					String guiterModel = scanner.nextLine();

					// BulderType

					Builder builderType=getEnum(scanner, "Enter the Guitar Builder Type:", Builder.values());
//					int builderOption;
//
//					while (true) {
//						System.out.println("Enter the Guitar Builder Type:");
//						int i = 0;
//						for (Builder type : Builder.values()) {
//							System.out.println(type.ordinal() + "." + type);
//							i++;
//						}
//						try {
//							builderOption = scanner.nextInt();
//
//							switch (builderOption) {
//							case 1:
//								builderType = Builder.FENDER;
//								break;
//							case 2:
//								builderType = Builder.GIBSON;
//								break;
//							case 3:
//								builderType = Builder.MARTIN;
//								break;
//							case 4:
//								builderType = Builder.TAYLOR;
//								break;
//							case 5:
//								builderType = Builder.CUSTOM;
//								break;
//							default:
//								System.out.println("Invalid option! Please select a proper option.");
//								continue;
//							}
//
//							break;
//						} catch (InputMismatchException e) {
//
//							System.out.println("Invalid input! Please enter a valid integer.");
//							scanner.nextLine();
//						}
//					}

					Type guiterType;
//					int TypeOption;
//					while (true) {
//						System.out.println("Enter the Guitar Type:");
//						int i = 0;
//						for (Type type : Type.values()) {
//							System.out.println(type.ordinal() + "." + type);
//							i++;
//						}
//						try {
//							TypeOption = scanner.nextInt();
//
//							switch (TypeOption) {
//							case 1:
//								guiterType = Type.ACOUSTIC;
//								break;
//							case 2:
//								guiterType = Type.ELECTRIC;
//								break;
//							case 3:
//								guiterType = Type.CLASSICAL;
//								break;
//							case 4:
//								guiterType = Type.BASS;
//								break;
//							case 5:
//								guiterType = Type.ACOUSTICELECTRIC;
//								break;
//							default:
//								System.out.println("Invalid option! Please select a proper option.");
//								continue;
//							}
//
//							break;
//						} catch (InputMismatchException e) {
//
//							System.out.println("Invalid input! Please enter a valid integer.");
//							scanner.nextLine();
//						}
//					}

					Wood topWood;
					int topWoodTypeOption;
					while (true) {
						System.out.println("Enter the Guitar TopWood Type:");
						int i = 0;
						for (Wood type : Wood.values()) {
							System.out.println(type.ordinal() + "." + type);
							i++;
						}
						try {
							topWoodTypeOption = scanner.nextInt();

							switch (topWoodTypeOption) {
							case 1:
								topWood = Wood.MAHOGANY;
								break;
							case 2:
								topWood = Wood.ROSEWOOD;
								break;
							case 3:
								topWood = Wood.MAPLE;
								break;
							case 4:
								topWood = Wood.SPRUCE;
								break;
							case 5:
								topWood = Wood.CEDAR;
								break;
							case 6:
								topWood = Wood.ALDER;
								break;
							case 7:
								topWood = Wood.OAK;
								break;
							default:
								System.out.println("Invalid option! Please select a proper option.");
								continue;
							}

							break;
						} catch (InputMismatchException e) {

							System.out.println("Invalid input! Please enter a valid integer.");
							scanner.nextLine();
						}
					}

					Wood backWood;
					int backWoodTypeOption;
					while (true) {
						System.out.println("Enter the Guitar TopWood Type:");

						for (Wood type : Wood.values()) {
							System.out.println(type.ordinal() + "." + type);

						}
						try {
							backWoodTypeOption = scanner.nextInt();

							switch (backWoodTypeOption) {
							case 1:
								backWood = Wood.MAHOGANY;
								break;
							case 2:
								backWood = Wood.ROSEWOOD;
								break;
							case 3:
								backWood = Wood.MAPLE;
								break;
							case 4:
								backWood = Wood.SPRUCE;
								break;
							case 5:
								backWood = Wood.CEDAR;
								break;
							case 6:
								backWood = Wood.ALDER;
								break;
							case 7:
								backWood = Wood.OAK;
								break;
							default:
								System.out.println("Invalid option! Please select a proper option.");
								continue;
							}

							break;
						} catch (InputMismatchException e) {

							System.out.println("Invalid input! Please enter a valid integer.");
							scanner.nextLine();
						}
					}

					// Use builderType here for the rest of your logic

//					list.addGuitar(new Guitar("123", 200,
//							new GuitarSpec(Builder.FENDER, "no", Type.BASS, Wood.OAK, Wood.OAK)));
					break;
				case 2:
					List<Guitar> data = list.getGuitarData();
					for (Guitar result : data) {
						System.out.println(result);
					}
					break;
				case 3:
					return;
				case 4:
					break;
				case 5:
					break;
				}

			} catch (InputMismatchException e) {
				System.out.println("Please enter only valid integer :" + e);
				scanner.next();
			}

		}
	}

}