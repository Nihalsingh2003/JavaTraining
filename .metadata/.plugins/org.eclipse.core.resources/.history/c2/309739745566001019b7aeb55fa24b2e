package com.aurionpro.Game.model;

import java.util.InputMismatchException;
import java.util.Scanner;

public class TicTacToeFacade {
	private Player player1;
	private Player player2;
	private Player currentPlayer;
	private Board board;
	private GameEngine gameEngine;
	private boolean gameOver;

	public TicTacToeFacade() {
		board = new Board();
		gameEngine = new GameEngine(board);
		gameOver = false;
	}

	public void startGame() {
		Scanner scanner = new Scanner(System.in);

		System.out.println("Welcome to Tic Tac Toe!");

		// Setup players
		System.out.print("Player 1, enter your name: ");
		String name1 = scanner.nextLine();
		player1 = new Player(name1, 'X');

		System.out.print("Player 2, enter your name: ");
		String name2 = scanner.nextLine();
		player2 = new Player(name2, 'O');

		boolean playAgain = true;

		while (playAgain) {
			board = new Board();
			gameEngine = new GameEngine(board);
			gameOver = false;
			currentPlayer = player1;
			System.err.println("Game Starts!");
			board.displayBoard();

			while (!gameOver) {
				System.out.println(currentPlayer.getName() + "'s (" + currentPlayer.getSymbol() + ") turn.");
				int row = -1, col = -1;

				boolean validMove = false;

				while (!validMove) {
					try {
						System.out.print("Enter row (1-3): ");
						row = scanner.nextInt();

						System.out.print("Enter column (1-3): ");
						col = scanner.nextInt();

						if (row < 1 || row > 3 || col < 1 || col > 3) {
							System.out.println(" Row and column must be between 1 and 3.");
							continue;
						}

						int rowIndex = row - 1;
						int colIndex = col - 1;

						if (!board.isCellEmpty(rowIndex, colIndex)) {
							System.out.println("That cell is already occupied. Try again.");
							continue;
						}

						validMove = true;
						playTurn(currentPlayer, rowIndex, colIndex);

					} catch (InputMismatchException e) {
						System.out.println("Invalid input. Please enter numbers only.");
						scanner.next();
					}
				}
			}
			scanner.nextLine();
			while (true) {
				System.out.println("Do you want to play again?: ");
				System.out.println("1.yes");
				System.out.println("2.No");
				String userInput = scanner.nextLine().trim();

				if (userInput.equals("1") || userInput.equalsIgnoreCase("yes")) {
					playAgain = true;
					break;
				} else if (userInput.equals("2") || userInput.equalsIgnoreCase("no")) {
					playAgain = false;
					System.out.println("Thanks for playing!");
					break;
				} else {
					System.out.println("Please enter 1 or 2.");
				}
			}
		}

		scanner.close();
	}

	public void playTurn(Player player, int row, int col) {
		board.placeSymbol(row, col, player.getSymbol());
		board.displayBoard();

		if (gameEngine.isWinningMove(row, col, player.getSymbol())) {
			System.out.println("ðŸŽ‰ " + player.getName() + " wins!");
			gameOver = true;
		} else if (board.isFull()) {
			System.out.println("It's a draw!");
			gameOver = true;
		} else {
			switchPlayer();
		}
	}

	private void switchPlayer() {
		currentPlayer = (currentPlayer == player1) ? player2 : player1;
	}
}
